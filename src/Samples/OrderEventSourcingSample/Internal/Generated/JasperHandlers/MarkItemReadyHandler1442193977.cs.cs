// <auto-generated/>
#pragma warning disable
using Wolverine;
using Wolverine.Marten.Publishing;
using Wolverine.Runtime.Handlers;
using OrderEventSourcingSample;
using Wolverine.Runtime;

namespace Internal.Generated.WolverineHandlers
{
    // START: MarkItemReadyHandler1442193977

    #region sample_generated_MarkItemReadyHandler

    public class MarkItemReadyHandler1442193977 : MessageHandler
    {
        private readonly OutboxedSessionFactory _outboxedSessionFactory;

        public MarkItemReadyHandler1442193977(OutboxedSessionFactory outboxedSessionFactory)
        {
            _outboxedSessionFactory = outboxedSessionFactory;
        }

        public override async Task HandleAsync(MessageContext context, CancellationToken cancellation)
        {
            var markItemReady = (MarkItemReady)context.Envelope.Message;
            await using var documentSession = _outboxedSessionFactory.OpenSession(context);
            var eventStore = documentSession.Events;
            // Loading Marten aggregate
            var eventStream = await eventStore.FetchForWriting<Order>(markItemReady.OrderId, markItemReady.Version, cancellation);

            var outgoing1 = MarkItemReadyHandler.Handle(markItemReady, eventStream.Aggregate);
            if (outgoing1 != null)
            {
                // Capturing any possible events returned from the command handlers
                eventStream.AppendMany(outgoing1);

            }

            await documentSession.SaveChangesAsync(cancellation);
        }

    }

    #endregion

    // END: MarkItemReadyHandler1442193977

}

