name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
env:
  config: Release
  disable_test_parallelization: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  db_pwd: P@55w0rd

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
          - 1433:1433
        env:
          ACCEPT_EULA: Y
          MSSQL_SA_PASSWORD: ${{ env.db_pwd }}

    steps:

    - name: Setup .NET 7
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 7.0.x

    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Build Version
      run: |
        dotnet tool install --global minver-cli --version 4.2.0
        version=$(minver --tag-prefix v)
        echo "MINVERVERSIONOVERRIDE=$version" >> $GITHUB_ENV
        echo "### Version: $version" >> $GITHUB_STEP_SUMMARY
    
    - name: OpenSSL config for SQL Server tests
      run: |
        if ! grep -q "MinProtocol" /etc/ssl/openssl.cnf; then
        sudo sed -i "/\[system_default_sect\]/a MinProtocol = TLSv1" /etc/ssl/openssl.cnf
        else
        sudo sed -i "s/MinProtocol.*/MinProtocol = TLSv1/g" /etc/ssl/openssl.cnf
        fi
        if ! grep -q "CipherString" /etc/ssl/openssl.cnf; then
        sudo sed -i "/\[system_default_sect\]/a CipherString = DEFAULT:@SECLEVEL=1" /etc/ssl/openssl.cnf
        else
        sudo sed -i "s/DEFAULT:@SECLEVEL.*/DEFAULT:@SECLEVEL=1/g" /etc/ssl/openssl.cnf
        fi
        if ! grep -q "MinProtocol" /usr/lib/ssl/openssl.cnf; then
        sudo sed -i "/\[system_default_sect\]/a MinProtocol = TLSv1" /usr/lib/ssl/openssl.cnf
        else
        sudo sed -i "s/MinProtocol.*/MinProtocol = TLSv1/g" /usr/lib/ssl/openssl.cnf
        fi
        if ! grep -q "CipherString" /usr/lib/ssl/openssl.cnf; then
        sudo sed -i "/\[system_default_sect\]/a CipherString = DEFAULT:@SECLEVEL=1" /usr/lib/ssl/openssl.cnf
        else
        sudo sed -i "s/DEFAULT:@SECLEVEL.*/DEFAULT:@SECLEVEL=1/g" /usr/lib/ssl/openssl.cnf
        fi
        grep "MinProtocol" /etc/ssl/openssl.cnf
        grep "DEFAULT:@SECLEVEL" /etc/ssl/openssl.cnf
        grep "MinProtocol" /usr/lib/ssl/openssl.cnf
        grep "DEFAULT:@SECLEVEL" /usr/lib/ssl/openssl.cnf
        echo $(openssl version -d)
  
    - name: Test
      run: ./build.sh --no-color test-persistence

    - name: Package
      if: github.event_name != 'pull_request'
      run: ./build.sh --no-color pack


    - name: Publish CI Packages
      if: github.event_name != 'pull_request'
      run: |
        for package in $(find -name "*.nupkg" | grep "minver" -v); do

          # GitHub
          if [ -n "${{ secrets.GITHUB_TOKEN }}" ]; then
            echo "${0##*/}": Pushing $package to GitHub...
            dotnet nuget push $package --source https://nuget.pkg.github.com/jasperfx/index.json --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate
          fi
          
          # Feedz (remove once GitHub supports anonymous access)
          if [ -n "${{ secrets.FEEDZ_KEY }}" ]; then
            echo "${0##*/}": Pushing $package to Feedz...
            dotnet nuget push $package --source https://f.feedz.io/jasperfx/wolverine/nuget --api-key ${{ secrets.FEEDZ_KEY }} --skip-duplicate
          fi

        done
      
    - name: Publish Release Packages
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        for package in $(find -name "*.nupkg" | grep "minver" -v); do
          echo "${0##*/}": Pushing $package...
          dotnet nuget push $package --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate
        done
